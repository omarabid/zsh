#!/bin/zsh

.autocomplete.key.set() {
  if [[ -z $key[$1] ]]; then
    key[$1]="$terminfo[$3]"; [[ -n $key[$1] && -v terminfo[smkx] ]] || key[$1]="$2"
  fi
}

.autocomplete.key.precmd() {
  emulate -L zsh -o extendedglob
  add-zsh-hook -d precmd .autocomplete.key.precmd

  if [[ ! -v key ]]; then
    # This file can be generated interactively with `autoload -Uz zkbd && zkbd`.
    # See http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Keyboard-Definition
    local zkbd=${ZDOTDIR:-$HOME}/.zkbd/${TERM}-${VENDOR}
    [[ -r $zkbd ]] &&
      source $zkbd

    [[ -v key ]] ||
      typeset -gA key
  fi

  .autocomplete.key.set Tab '^I' ht
  .autocomplete.key.set BackTab '^[[Z' kcbt
  .autocomplete.key.set Up '^[[A' kcuu1
  .autocomplete.key.set Down '^[[B' kcud1
  .autocomplete.key.set Right '^[[C' kcuf1
  .autocomplete.key.set Left '^[[D' kcub1
  .autocomplete.key.set End '^[[F' kend
  .autocomplete.key.set Home '^[[H' khome
  .autocomplete.key.set PageUp '^[[5~' kpp
  .autocomplete.key.set PageDown '^[[6~' knp

  # These are not defined in `terminfo`.
  .autocomplete.key.set AltSpace '^[ '
  .autocomplete.key.set ControlSpace '^@'
  .autocomplete.key.set DeleteList '^D'
  .autocomplete.key.set BeginningOfBuffer '^[<'
  .autocomplete.key.set EndOfBuffer '^[>'

  case $( bindkey -lL main ) in
    *emacs*)
      .autocomplete.key.set Undo '^_'
      .autocomplete.key.set ForwardWord '^[f'
      .autocomplete.key.set BackwardWord '^[b'
      ;;
    *vi*)
      .autocomplete.key.set Undo '^[u'
      .autocomplete.key.set ForwardWord '^[W'
      .autocomplete.key.set BackwardWord '^[B'
      ;;
  esac
}

emulate -L zsh -o extendedglob
zmodload zsh/terminfo

# Use terminfo codes, if possible.
if [[ -v terminfo[smkx] ]]; then
  add-zle-hook-widget -d line-init .autocomplete.key.line-init
  add-zle-hook-widget line-init .autocomplete.key.line-init

  .autocomplete.key.line-init() {
    emulate -L zsh -o extendedglob
    echoti smkx  # Switch to application mode.
  }

  if [[ -v terminfo[rmkx] ]]; then
    add-zle-hook-widget -d line-finish .autocomplete.key.line-finish
    add-zle-hook-widget line-finish .autocomplete.key.line-finish

    .autocomplete.key.line-finish() {
      emulate -L zsh -o extendedglob
      echoti rmkx  # Switch to raw mode.
    }
  fi
fi

add-zsh-hook precmd .autocomplete.key.precmd
